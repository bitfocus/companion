/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root.tsx'
import { Route as RedirectsTablet3RouteImport } from './routes/-redirects/tablet3.tsx'
import { Route as RedirectsTablet2HtmlRouteImport } from './routes/-redirects/tablet2-html.tsx'
import { Route as RedirectsTabletHtmlRouteImport } from './routes/-redirects/tablet-html.tsx'
import { Route as RedirectsIpadHtmlRouteImport } from './routes/-redirects/ipad-html.tsx'
import { Route as RedirectsHelpHtmlRouteImport } from './routes/-redirects/help-html.tsx'
import { Route as RedirectsEmulatorsRouteImport } from './routes/-redirects/emulators.tsx'
import { Route as RedirectsEmulator2RouteImport } from './routes/-redirects/emulator2.tsx'
import { Route as RedirectsEmulatorHtmlRouteImport } from './routes/-redirects/emulator-html.tsx'
import { Route as EmulatorRouteImport } from './routes/self-contained/emulator.tsx'
import { Route as appRouteImport } from './routes/_app.tsx'
import { Route as EmulatorIndexRouteImport } from './routes/self-contained/emulator/index.tsx'
import { Route as IndexRouteImport } from './routes/app/index.tsx'
import { Route as ConnectionDebugDotconnectionIdRouteImport } from './routes/self-contained/connection-debug.$connectionId.tsx'
import { Route as TriggersRouteImport } from './routes/app/triggers.tsx'
import { Route as ModulesRouteImport } from './routes/app/modules.tsx'
import { Route as LogRouteImport } from './routes/app/log.tsx'
import { Route as ImportExportRouteImport } from './routes/app/import-export.tsx'
import { Route as ConnectionsRouteImport } from './routes/app/connections.tsx'
import { Route as CloudRouteImport } from './routes/app/cloud.tsx'
import { Route as ButtonsRouteImport } from './routes/app/buttons.tsx'
import { Route as SplatRouteImport } from './routes/app/$.tsx'
import { Route as VariablesIndexRouteImport } from './routes/app/variables/index.tsx'
import { Route as TriggersIndexRouteImport } from './routes/app/triggers/index.tsx'
import { Route as SettingsIndexRouteImport } from './routes/app/settings/index.tsx'
import { Route as ModulesIndexRouteImport } from './routes/app/modules/index.tsx'
import { Route as ConnectionsIndexRouteImport } from './routes/app/connections/index.tsx'
import { Route as VariablesCustomRouteImport } from './routes/app/variables/custom.tsx'
import { Route as VariablesLabelRouteImport } from './routes/app/variables/$label.tsx'
import { Route as TriggersControlIdRouteImport } from './routes/app/triggers/$controlId.tsx'
import { Route as SurfacesOutboundRouteImport } from './routes/app/surfaces/outbound.tsx'
import { Route as SurfacesDiscoverRouteImport } from './routes/app/surfaces/discover.tsx'
import { Route as SurfacesConfiguredRouteImport } from './routes/app/surfaces/configured.tsx'
import { Route as SurfacesSplatRouteImport } from './routes/app/surfaces/$.tsx'
import { Route as SettingsSurfacesRouteImport } from './routes/app/settings/surfaces.tsx'
import { Route as SettingsProtocolsRouteImport } from './routes/app/settings/protocols.tsx'
import { Route as SettingsGeneralRouteImport } from './routes/app/settings/general.tsx'
import { Route as SettingsButtonsRouteImport } from './routes/app/settings/buttons.tsx'
import { Route as SettingsBackupsRouteImport } from './routes/app/settings/backups.tsx'
import { Route as SettingsAdvancedRouteImport } from './routes/app/settings/advanced.tsx'
import { Route as ModulesModuleIdRouteImport } from './routes/app/modules/$moduleId.tsx'
import { Route as ConnectionsConnectionIdRouteImport } from './routes/app/connections/$connectionId.tsx'
import { Route as ButtonsPageRouteImport } from './routes/app/buttons/$page.tsx'
import { Route as SurfacesConfiguredIndexRouteImport } from './routes/app/surfaces/configured/index.tsx'
import { Route as SettingsBackupsIndexRouteImport } from './routes/app/settings/backups/index.tsx'
import { Route as SurfacesConfiguredItemIdRouteImport } from './routes/app/surfaces/configured/$itemId.tsx'
import { Route as SettingsBackupsRuleIdRouteImport } from './routes/app/settings/backups/$ruleId.tsx'

const TabletDotlazyRouteImport = createFileRoute('/tablet')()
const GettingStartedDotlazyRouteImport = createFileRoute('/getting-started')()
const EmulatorEmulatorIdDotlazyRouteImport = createFileRoute(
  '/emulator/$emulatorId',
)()

const TabletDotlazyRoute = TabletDotlazyRouteImport.update({
  id: '/tablet',
  path: '/tablet',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/self-contained/tablet.lazy.tsx').then((d) => d.Route),
)
const GettingStartedDotlazyRoute = GettingStartedDotlazyRouteImport.update({
  id: '/getting-started',
  path: '/getting-started',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/self-contained/getting-started.lazy.tsx').then(
    (d) => d.Route,
  ),
)
const RedirectsTablet3Route = RedirectsTablet3RouteImport.update({
  id: '/tablet3',
  path: '/tablet3',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsTablet2HtmlRoute = RedirectsTablet2HtmlRouteImport.update({
  id: '/tablet2.html',
  path: '/tablet2.html',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsTabletHtmlRoute = RedirectsTabletHtmlRouteImport.update({
  id: '/tablet.html',
  path: '/tablet.html',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsIpadHtmlRoute = RedirectsIpadHtmlRouteImport.update({
  id: '/ipad.html',
  path: '/ipad.html',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsHelpHtmlRoute = RedirectsHelpHtmlRouteImport.update({
  id: '/help.html',
  path: '/help.html',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsEmulatorsRoute = RedirectsEmulatorsRouteImport.update({
  id: '/emulators',
  path: '/emulators',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsEmulator2Route = RedirectsEmulator2RouteImport.update({
  id: '/emulator2',
  path: '/emulator2',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectsEmulatorHtmlRoute = RedirectsEmulatorHtmlRouteImport.update({
  id: '/emulator.html',
  path: '/emulator.html',
  getParentRoute: () => rootRouteImport,
} as any)
const EmulatorRoute = EmulatorRouteImport.update({
  id: '/emulator',
  path: '/emulator',
  getParentRoute: () => rootRouteImport,
} as any)
const appRoute = appRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const EmulatorIndexRoute = EmulatorIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EmulatorRoute,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRoute,
} as any)
const EmulatorEmulatorIdDotlazyRoute =
  EmulatorEmulatorIdDotlazyRouteImport.update({
    id: '/$emulatorId',
    path: '/$emulatorId',
    getParentRoute: () => EmulatorRoute,
  } as any).lazy(() =>
    import('./routes/self-contained/emulator/$emulatorId.lazy.tsx').then(
      (d) => d.Route,
    ),
  )
const ConnectionDebugDotconnectionIdRoute =
  ConnectionDebugDotconnectionIdRouteImport.update({
    id: '/connection-debug/$connectionId',
    path: '/connection-debug/$connectionId',
    getParentRoute: () => rootRouteImport,
  } as any)
const TriggersRoute = TriggersRouteImport.update({
  id: '/triggers',
  path: '/triggers',
  getParentRoute: () => appRoute,
} as any)
const ModulesRoute = ModulesRouteImport.update({
  id: '/modules',
  path: '/modules',
  getParentRoute: () => appRoute,
} as any)
const LogRoute = LogRouteImport.update({
  id: '/log',
  path: '/log',
  getParentRoute: () => appRoute,
} as any)
const ImportExportRoute = ImportExportRouteImport.update({
  id: '/import-export',
  path: '/import-export',
  getParentRoute: () => appRoute,
} as any)
const ConnectionsRoute = ConnectionsRouteImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => appRoute,
} as any)
const CloudRoute = CloudRouteImport.update({
  id: '/cloud',
  path: '/cloud',
  getParentRoute: () => appRoute,
} as any)
const ButtonsRoute = ButtonsRouteImport.update({
  id: '/buttons',
  path: '/buttons',
  getParentRoute: () => appRoute,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => appRoute,
} as any)
const VariablesIndexRoute = VariablesIndexRouteImport.update({
  id: '/variables/',
  path: '/variables/',
  getParentRoute: () => appRoute,
} as any)
const TriggersIndexRoute = TriggersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TriggersRoute,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => appRoute,
} as any)
const ModulesIndexRoute = ModulesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ModulesRoute,
} as any)
const ConnectionsIndexRoute = ConnectionsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConnectionsRoute,
} as any)
const VariablesCustomRoute = VariablesCustomRouteImport.update({
  id: '/variables/custom',
  path: '/variables/custom',
  getParentRoute: () => appRoute,
} as any)
const VariablesLabelRoute = VariablesLabelRouteImport.update({
  id: '/variables/$label',
  path: '/variables/$label',
  getParentRoute: () => appRoute,
} as any)
const TriggersControlIdRoute = TriggersControlIdRouteImport.update({
  id: '/$controlId',
  path: '/$controlId',
  getParentRoute: () => TriggersRoute,
} as any)
const SurfacesOutboundRoute = SurfacesOutboundRouteImport.update({
  id: '/surfaces/outbound',
  path: '/surfaces/outbound',
  getParentRoute: () => appRoute,
} as any)
const SurfacesDiscoverRoute = SurfacesDiscoverRouteImport.update({
  id: '/surfaces/discover',
  path: '/surfaces/discover',
  getParentRoute: () => appRoute,
} as any)
const SurfacesConfiguredRoute = SurfacesConfiguredRouteImport.update({
  id: '/surfaces/configured',
  path: '/surfaces/configured',
  getParentRoute: () => appRoute,
} as any)
const SurfacesSplatRoute = SurfacesSplatRouteImport.update({
  id: '/surfaces/$',
  path: '/surfaces/$',
  getParentRoute: () => appRoute,
} as any)
const SettingsSurfacesRoute = SettingsSurfacesRouteImport.update({
  id: '/settings/surfaces',
  path: '/settings/surfaces',
  getParentRoute: () => appRoute,
} as any)
const SettingsProtocolsRoute = SettingsProtocolsRouteImport.update({
  id: '/settings/protocols',
  path: '/settings/protocols',
  getParentRoute: () => appRoute,
} as any)
const SettingsGeneralRoute = SettingsGeneralRouteImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => appRoute,
} as any)
const SettingsButtonsRoute = SettingsButtonsRouteImport.update({
  id: '/settings/buttons',
  path: '/settings/buttons',
  getParentRoute: () => appRoute,
} as any)
const SettingsBackupsRoute = SettingsBackupsRouteImport.update({
  id: '/settings/backups',
  path: '/settings/backups',
  getParentRoute: () => appRoute,
} as any)
const SettingsAdvancedRoute = SettingsAdvancedRouteImport.update({
  id: '/settings/advanced',
  path: '/settings/advanced',
  getParentRoute: () => appRoute,
} as any)
const ModulesModuleIdRoute = ModulesModuleIdRouteImport.update({
  id: '/$moduleId',
  path: '/$moduleId',
  getParentRoute: () => ModulesRoute,
} as any)
const ConnectionsConnectionIdRoute = ConnectionsConnectionIdRouteImport.update({
  id: '/$connectionId',
  path: '/$connectionId',
  getParentRoute: () => ConnectionsRoute,
} as any)
const ButtonsPageRoute = ButtonsPageRouteImport.update({
  id: '/$page',
  path: '/$page',
  getParentRoute: () => ButtonsRoute,
} as any)
const SurfacesConfiguredIndexRoute = SurfacesConfiguredIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SurfacesConfiguredRoute,
} as any)
const SettingsBackupsIndexRoute = SettingsBackupsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsBackupsRoute,
} as any)
const SurfacesConfiguredItemIdRoute =
  SurfacesConfiguredItemIdRouteImport.update({
    id: '/$itemId',
    path: '/$itemId',
    getParentRoute: () => SurfacesConfiguredRoute,
  } as any)
const SettingsBackupsRuleIdRoute = SettingsBackupsRuleIdRouteImport.update({
  id: '/$ruleId',
  path: '/$ruleId',
  getParentRoute: () => SettingsBackupsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/emulator': typeof EmulatorRouteWithChildren
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedDotlazyRoute
  '/tablet': typeof TabletDotlazyRoute
  '/$': typeof SplatRoute
  '/buttons': typeof ButtonsRouteWithChildren
  '/cloud': typeof CloudRoute
  '/connections': typeof ConnectionsRouteWithChildren
  '/import-export': typeof ImportExportRoute
  '/log': typeof LogRoute
  '/modules': typeof ModulesRouteWithChildren
  '/triggers': typeof TriggersRouteWithChildren
  '/connection-debug/$connectionId': typeof ConnectionDebugDotconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdDotlazyRoute
  '/': typeof IndexRoute
  '/emulator/': typeof EmulatorIndexRoute
  '/buttons/$page': typeof ButtonsPageRoute
  '/connections/$connectionId': typeof ConnectionsConnectionIdRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/settings/advanced': typeof SettingsAdvancedRoute
  '/settings/backups': typeof SettingsBackupsRouteWithChildren
  '/settings/buttons': typeof SettingsButtonsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/protocols': typeof SettingsProtocolsRoute
  '/settings/surfaces': typeof SettingsSurfacesRoute
  '/surfaces/$': typeof SurfacesSplatRoute
  '/surfaces/configured': typeof SurfacesConfiguredRouteWithChildren
  '/surfaces/discover': typeof SurfacesDiscoverRoute
  '/surfaces/outbound': typeof SurfacesOutboundRoute
  '/triggers/$controlId': typeof TriggersControlIdRoute
  '/variables/$label': typeof VariablesLabelRoute
  '/variables/custom': typeof VariablesCustomRoute
  '/connections/': typeof ConnectionsIndexRoute
  '/modules/': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/triggers/': typeof TriggersIndexRoute
  '/variables': typeof VariablesIndexRoute
  '/settings/backups/$ruleId': typeof SettingsBackupsRuleIdRoute
  '/surfaces/configured/$itemId': typeof SurfacesConfiguredItemIdRoute
  '/settings/backups/': typeof SettingsBackupsIndexRoute
  '/surfaces/configured/': typeof SurfacesConfiguredIndexRoute
}
export interface FileRoutesByTo {
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedDotlazyRoute
  '/tablet': typeof TabletDotlazyRoute
  '/$': typeof SplatRoute
  '/buttons': typeof ButtonsRouteWithChildren
  '/cloud': typeof CloudRoute
  '/import-export': typeof ImportExportRoute
  '/log': typeof LogRoute
  '/connection-debug/$connectionId': typeof ConnectionDebugDotconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdDotlazyRoute
  '/': typeof IndexRoute
  '/emulator': typeof EmulatorIndexRoute
  '/buttons/$page': typeof ButtonsPageRoute
  '/connections/$connectionId': typeof ConnectionsConnectionIdRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/settings/advanced': typeof SettingsAdvancedRoute
  '/settings/buttons': typeof SettingsButtonsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/protocols': typeof SettingsProtocolsRoute
  '/settings/surfaces': typeof SettingsSurfacesRoute
  '/surfaces/$': typeof SurfacesSplatRoute
  '/surfaces/discover': typeof SurfacesDiscoverRoute
  '/surfaces/outbound': typeof SurfacesOutboundRoute
  '/triggers/$controlId': typeof TriggersControlIdRoute
  '/variables/$label': typeof VariablesLabelRoute
  '/variables/custom': typeof VariablesCustomRoute
  '/connections': typeof ConnectionsIndexRoute
  '/modules': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/triggers': typeof TriggersIndexRoute
  '/variables': typeof VariablesIndexRoute
  '/settings/backups/$ruleId': typeof SettingsBackupsRuleIdRoute
  '/surfaces/configured/$itemId': typeof SurfacesConfiguredItemIdRoute
  '/settings/backups': typeof SettingsBackupsIndexRoute
  '/surfaces/configured': typeof SurfacesConfiguredIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof appRouteWithChildren
  '/emulator': typeof EmulatorRouteWithChildren
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedDotlazyRoute
  '/tablet': typeof TabletDotlazyRoute
  '/_app/$': typeof SplatRoute
  '/_app/buttons': typeof ButtonsRouteWithChildren
  '/_app/cloud': typeof CloudRoute
  '/_app/connections': typeof ConnectionsRouteWithChildren
  '/_app/import-export': typeof ImportExportRoute
  '/_app/log': typeof LogRoute
  '/_app/modules': typeof ModulesRouteWithChildren
  '/_app/triggers': typeof TriggersRouteWithChildren
  '/connection-debug/$connectionId': typeof ConnectionDebugDotconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdDotlazyRoute
  '/_app/': typeof IndexRoute
  '/emulator/': typeof EmulatorIndexRoute
  '/_app/buttons/$page': typeof ButtonsPageRoute
  '/_app/connections/$connectionId': typeof ConnectionsConnectionIdRoute
  '/_app/modules/$moduleId': typeof ModulesModuleIdRoute
  '/_app/settings/advanced': typeof SettingsAdvancedRoute
  '/_app/settings/backups': typeof SettingsBackupsRouteWithChildren
  '/_app/settings/buttons': typeof SettingsButtonsRoute
  '/_app/settings/general': typeof SettingsGeneralRoute
  '/_app/settings/protocols': typeof SettingsProtocolsRoute
  '/_app/settings/surfaces': typeof SettingsSurfacesRoute
  '/_app/surfaces/$': typeof SurfacesSplatRoute
  '/_app/surfaces/configured': typeof SurfacesConfiguredRouteWithChildren
  '/_app/surfaces/discover': typeof SurfacesDiscoverRoute
  '/_app/surfaces/outbound': typeof SurfacesOutboundRoute
  '/_app/triggers/$controlId': typeof TriggersControlIdRoute
  '/_app/variables/$label': typeof VariablesLabelRoute
  '/_app/variables/custom': typeof VariablesCustomRoute
  '/_app/connections/': typeof ConnectionsIndexRoute
  '/_app/modules/': typeof ModulesIndexRoute
  '/_app/settings/': typeof SettingsIndexRoute
  '/_app/triggers/': typeof TriggersIndexRoute
  '/_app/variables/': typeof VariablesIndexRoute
  '/_app/settings/backups/$ruleId': typeof SettingsBackupsRuleIdRoute
  '/_app/surfaces/configured/$itemId': typeof SurfacesConfiguredItemIdRoute
  '/_app/settings/backups/': typeof SettingsBackupsIndexRoute
  '/_app/surfaces/configured/': typeof SurfacesConfiguredIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/emulator'
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/$'
    | '/buttons'
    | '/cloud'
    | '/connections'
    | '/import-export'
    | '/log'
    | '/modules'
    | '/triggers'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/'
    | '/emulator/'
    | '/buttons/$page'
    | '/connections/$connectionId'
    | '/modules/$moduleId'
    | '/settings/advanced'
    | '/settings/backups'
    | '/settings/buttons'
    | '/settings/general'
    | '/settings/protocols'
    | '/settings/surfaces'
    | '/surfaces/$'
    | '/surfaces/configured'
    | '/surfaces/discover'
    | '/surfaces/outbound'
    | '/triggers/$controlId'
    | '/variables/$label'
    | '/variables/custom'
    | '/connections/'
    | '/modules/'
    | '/settings'
    | '/triggers/'
    | '/variables'
    | '/settings/backups/$ruleId'
    | '/surfaces/configured/$itemId'
    | '/settings/backups/'
    | '/surfaces/configured/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/$'
    | '/buttons'
    | '/cloud'
    | '/import-export'
    | '/log'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/'
    | '/emulator'
    | '/buttons/$page'
    | '/connections/$connectionId'
    | '/modules/$moduleId'
    | '/settings/advanced'
    | '/settings/buttons'
    | '/settings/general'
    | '/settings/protocols'
    | '/settings/surfaces'
    | '/surfaces/$'
    | '/surfaces/discover'
    | '/surfaces/outbound'
    | '/triggers/$controlId'
    | '/variables/$label'
    | '/variables/custom'
    | '/connections'
    | '/modules'
    | '/settings'
    | '/triggers'
    | '/variables'
    | '/settings/backups/$ruleId'
    | '/surfaces/configured/$itemId'
    | '/settings/backups'
    | '/surfaces/configured'
  id:
    | '__root__'
    | '/_app'
    | '/emulator'
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/_app/$'
    | '/_app/buttons'
    | '/_app/cloud'
    | '/_app/connections'
    | '/_app/import-export'
    | '/_app/log'
    | '/_app/modules'
    | '/_app/triggers'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/_app/'
    | '/emulator/'
    | '/_app/buttons/$page'
    | '/_app/connections/$connectionId'
    | '/_app/modules/$moduleId'
    | '/_app/settings/advanced'
    | '/_app/settings/backups'
    | '/_app/settings/buttons'
    | '/_app/settings/general'
    | '/_app/settings/protocols'
    | '/_app/settings/surfaces'
    | '/_app/surfaces/$'
    | '/_app/surfaces/configured'
    | '/_app/surfaces/discover'
    | '/_app/surfaces/outbound'
    | '/_app/triggers/$controlId'
    | '/_app/variables/$label'
    | '/_app/variables/custom'
    | '/_app/connections/'
    | '/_app/modules/'
    | '/_app/settings/'
    | '/_app/triggers/'
    | '/_app/variables/'
    | '/_app/settings/backups/$ruleId'
    | '/_app/surfaces/configured/$itemId'
    | '/_app/settings/backups/'
    | '/_app/surfaces/configured/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRoute: typeof appRouteWithChildren
  EmulatorRoute: typeof EmulatorRouteWithChildren
  RedirectsEmulatorHtmlRoute: typeof RedirectsEmulatorHtmlRoute
  RedirectsEmulator2Route: typeof RedirectsEmulator2Route
  RedirectsEmulatorsRoute: typeof RedirectsEmulatorsRoute
  RedirectsHelpHtmlRoute: typeof RedirectsHelpHtmlRoute
  RedirectsIpadHtmlRoute: typeof RedirectsIpadHtmlRoute
  RedirectsTabletHtmlRoute: typeof RedirectsTabletHtmlRoute
  RedirectsTablet2HtmlRoute: typeof RedirectsTablet2HtmlRoute
  RedirectsTablet3Route: typeof RedirectsTablet3Route
  GettingStartedDotlazyRoute: typeof GettingStartedDotlazyRoute
  TabletDotlazyRoute: typeof TabletDotlazyRoute
  ConnectionDebugDotconnectionIdRoute: typeof ConnectionDebugDotconnectionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tablet': {
      id: '/tablet'
      path: '/tablet'
      fullPath: '/tablet'
      preLoaderRoute: typeof TabletDotlazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/getting-started': {
      id: '/getting-started'
      path: '/getting-started'
      fullPath: '/getting-started'
      preLoaderRoute: typeof GettingStartedDotlazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tablet3': {
      id: '/tablet3'
      path: '/tablet3'
      fullPath: '/tablet3'
      preLoaderRoute: typeof RedirectsTablet3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tablet2.html': {
      id: '/tablet2.html'
      path: '/tablet2.html'
      fullPath: '/tablet2.html'
      preLoaderRoute: typeof RedirectsTablet2HtmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tablet.html': {
      id: '/tablet.html'
      path: '/tablet.html'
      fullPath: '/tablet.html'
      preLoaderRoute: typeof RedirectsTabletHtmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ipad.html': {
      id: '/ipad.html'
      path: '/ipad.html'
      fullPath: '/ipad.html'
      preLoaderRoute: typeof RedirectsIpadHtmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help.html': {
      id: '/help.html'
      path: '/help.html'
      fullPath: '/help.html'
      preLoaderRoute: typeof RedirectsHelpHtmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emulators': {
      id: '/emulators'
      path: '/emulators'
      fullPath: '/emulators'
      preLoaderRoute: typeof RedirectsEmulatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emulator2': {
      id: '/emulator2'
      path: '/emulator2'
      fullPath: '/emulator2'
      preLoaderRoute: typeof RedirectsEmulator2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emulator.html': {
      id: '/emulator.html'
      path: '/emulator.html'
      fullPath: '/emulator.html'
      preLoaderRoute: typeof RedirectsEmulatorHtmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emulator': {
      id: '/emulator'
      path: '/emulator'
      fullPath: '/emulator'
      preLoaderRoute: typeof EmulatorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emulator/': {
      id: '/emulator/'
      path: '/'
      fullPath: '/emulator/'
      preLoaderRoute: typeof EmulatorIndexRouteImport
      parentRoute: typeof EmulatorRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof appRoute
    }
    '/emulator/$emulatorId': {
      id: '/emulator/$emulatorId'
      path: '/$emulatorId'
      fullPath: '/emulator/$emulatorId'
      preLoaderRoute: typeof EmulatorEmulatorIdDotlazyRouteImport
      parentRoute: typeof EmulatorRoute
    }
    '/connection-debug/$connectionId': {
      id: '/connection-debug/$connectionId'
      path: '/connection-debug/$connectionId'
      fullPath: '/connection-debug/$connectionId'
      preLoaderRoute: typeof ConnectionDebugDotconnectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/triggers': {
      id: '/_app/triggers'
      path: '/triggers'
      fullPath: '/triggers'
      preLoaderRoute: typeof TriggersRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/modules': {
      id: '/_app/modules'
      path: '/modules'
      fullPath: '/modules'
      preLoaderRoute: typeof ModulesRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/log': {
      id: '/_app/log'
      path: '/log'
      fullPath: '/log'
      preLoaderRoute: typeof LogRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/import-export': {
      id: '/_app/import-export'
      path: '/import-export'
      fullPath: '/import-export'
      preLoaderRoute: typeof ImportExportRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/connections': {
      id: '/_app/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/cloud': {
      id: '/_app/cloud'
      path: '/cloud'
      fullPath: '/cloud'
      preLoaderRoute: typeof CloudRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/buttons': {
      id: '/_app/buttons'
      path: '/buttons'
      fullPath: '/buttons'
      preLoaderRoute: typeof ButtonsRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/$': {
      id: '/_app/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/variables/': {
      id: '/_app/variables/'
      path: '/variables'
      fullPath: '/variables'
      preLoaderRoute: typeof VariablesIndexRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/triggers/': {
      id: '/_app/triggers/'
      path: '/'
      fullPath: '/triggers/'
      preLoaderRoute: typeof TriggersIndexRouteImport
      parentRoute: typeof TriggersRoute
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/modules/': {
      id: '/_app/modules/'
      path: '/'
      fullPath: '/modules/'
      preLoaderRoute: typeof ModulesIndexRouteImport
      parentRoute: typeof ModulesRoute
    }
    '/_app/connections/': {
      id: '/_app/connections/'
      path: '/'
      fullPath: '/connections/'
      preLoaderRoute: typeof ConnectionsIndexRouteImport
      parentRoute: typeof ConnectionsRoute
    }
    '/_app/variables/custom': {
      id: '/_app/variables/custom'
      path: '/variables/custom'
      fullPath: '/variables/custom'
      preLoaderRoute: typeof VariablesCustomRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/variables/$label': {
      id: '/_app/variables/$label'
      path: '/variables/$label'
      fullPath: '/variables/$label'
      preLoaderRoute: typeof VariablesLabelRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/triggers/$controlId': {
      id: '/_app/triggers/$controlId'
      path: '/$controlId'
      fullPath: '/triggers/$controlId'
      preLoaderRoute: typeof TriggersControlIdRouteImport
      parentRoute: typeof TriggersRoute
    }
    '/_app/surfaces/outbound': {
      id: '/_app/surfaces/outbound'
      path: '/surfaces/outbound'
      fullPath: '/surfaces/outbound'
      preLoaderRoute: typeof SurfacesOutboundRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/surfaces/discover': {
      id: '/_app/surfaces/discover'
      path: '/surfaces/discover'
      fullPath: '/surfaces/discover'
      preLoaderRoute: typeof SurfacesDiscoverRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/surfaces/configured': {
      id: '/_app/surfaces/configured'
      path: '/surfaces/configured'
      fullPath: '/surfaces/configured'
      preLoaderRoute: typeof SurfacesConfiguredRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/surfaces/$': {
      id: '/_app/surfaces/$'
      path: '/surfaces/$'
      fullPath: '/surfaces/$'
      preLoaderRoute: typeof SurfacesSplatRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/surfaces': {
      id: '/_app/settings/surfaces'
      path: '/settings/surfaces'
      fullPath: '/settings/surfaces'
      preLoaderRoute: typeof SettingsSurfacesRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/protocols': {
      id: '/_app/settings/protocols'
      path: '/settings/protocols'
      fullPath: '/settings/protocols'
      preLoaderRoute: typeof SettingsProtocolsRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/general': {
      id: '/_app/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/buttons': {
      id: '/_app/settings/buttons'
      path: '/settings/buttons'
      fullPath: '/settings/buttons'
      preLoaderRoute: typeof SettingsButtonsRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/backups': {
      id: '/_app/settings/backups'
      path: '/settings/backups'
      fullPath: '/settings/backups'
      preLoaderRoute: typeof SettingsBackupsRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/settings/advanced': {
      id: '/_app/settings/advanced'
      path: '/settings/advanced'
      fullPath: '/settings/advanced'
      preLoaderRoute: typeof SettingsAdvancedRouteImport
      parentRoute: typeof appRoute
    }
    '/_app/modules/$moduleId': {
      id: '/_app/modules/$moduleId'
      path: '/$moduleId'
      fullPath: '/modules/$moduleId'
      preLoaderRoute: typeof ModulesModuleIdRouteImport
      parentRoute: typeof ModulesRoute
    }
    '/_app/connections/$connectionId': {
      id: '/_app/connections/$connectionId'
      path: '/$connectionId'
      fullPath: '/connections/$connectionId'
      preLoaderRoute: typeof ConnectionsConnectionIdRouteImport
      parentRoute: typeof ConnectionsRoute
    }
    '/_app/buttons/$page': {
      id: '/_app/buttons/$page'
      path: '/$page'
      fullPath: '/buttons/$page'
      preLoaderRoute: typeof ButtonsPageRouteImport
      parentRoute: typeof ButtonsRoute
    }
    '/_app/surfaces/configured/': {
      id: '/_app/surfaces/configured/'
      path: '/'
      fullPath: '/surfaces/configured/'
      preLoaderRoute: typeof SurfacesConfiguredIndexRouteImport
      parentRoute: typeof SurfacesConfiguredRoute
    }
    '/_app/settings/backups/': {
      id: '/_app/settings/backups/'
      path: '/'
      fullPath: '/settings/backups/'
      preLoaderRoute: typeof SettingsBackupsIndexRouteImport
      parentRoute: typeof SettingsBackupsRoute
    }
    '/_app/surfaces/configured/$itemId': {
      id: '/_app/surfaces/configured/$itemId'
      path: '/$itemId'
      fullPath: '/surfaces/configured/$itemId'
      preLoaderRoute: typeof SurfacesConfiguredItemIdRouteImport
      parentRoute: typeof SurfacesConfiguredRoute
    }
    '/_app/settings/backups/$ruleId': {
      id: '/_app/settings/backups/$ruleId'
      path: '/$ruleId'
      fullPath: '/settings/backups/$ruleId'
      preLoaderRoute: typeof SettingsBackupsRuleIdRouteImport
      parentRoute: typeof SettingsBackupsRoute
    }
  }
}

interface ButtonsRouteChildren {
  ButtonsPageRoute: typeof ButtonsPageRoute
}

const ButtonsRouteChildren: ButtonsRouteChildren = {
  ButtonsPageRoute: ButtonsPageRoute,
}

const ButtonsRouteWithChildren =
  ButtonsRoute._addFileChildren(ButtonsRouteChildren)

interface ConnectionsRouteChildren {
  ConnectionsConnectionIdRoute: typeof ConnectionsConnectionIdRoute
  ConnectionsIndexRoute: typeof ConnectionsIndexRoute
}

const ConnectionsRouteChildren: ConnectionsRouteChildren = {
  ConnectionsConnectionIdRoute: ConnectionsConnectionIdRoute,
  ConnectionsIndexRoute: ConnectionsIndexRoute,
}

const ConnectionsRouteWithChildren = ConnectionsRoute._addFileChildren(
  ConnectionsRouteChildren,
)

interface ModulesRouteChildren {
  ModulesModuleIdRoute: typeof ModulesModuleIdRoute
  ModulesIndexRoute: typeof ModulesIndexRoute
}

const ModulesRouteChildren: ModulesRouteChildren = {
  ModulesModuleIdRoute: ModulesModuleIdRoute,
  ModulesIndexRoute: ModulesIndexRoute,
}

const ModulesRouteWithChildren =
  ModulesRoute._addFileChildren(ModulesRouteChildren)

interface TriggersRouteChildren {
  TriggersControlIdRoute: typeof TriggersControlIdRoute
  TriggersIndexRoute: typeof TriggersIndexRoute
}

const TriggersRouteChildren: TriggersRouteChildren = {
  TriggersControlIdRoute: TriggersControlIdRoute,
  TriggersIndexRoute: TriggersIndexRoute,
}

const TriggersRouteWithChildren = TriggersRoute._addFileChildren(
  TriggersRouteChildren,
)

interface SettingsBackupsRouteChildren {
  SettingsBackupsRuleIdRoute: typeof SettingsBackupsRuleIdRoute
  SettingsBackupsIndexRoute: typeof SettingsBackupsIndexRoute
}

const SettingsBackupsRouteChildren: SettingsBackupsRouteChildren = {
  SettingsBackupsRuleIdRoute: SettingsBackupsRuleIdRoute,
  SettingsBackupsIndexRoute: SettingsBackupsIndexRoute,
}

const SettingsBackupsRouteWithChildren = SettingsBackupsRoute._addFileChildren(
  SettingsBackupsRouteChildren,
)

interface SurfacesConfiguredRouteChildren {
  SurfacesConfiguredItemIdRoute: typeof SurfacesConfiguredItemIdRoute
  SurfacesConfiguredIndexRoute: typeof SurfacesConfiguredIndexRoute
}

const SurfacesConfiguredRouteChildren: SurfacesConfiguredRouteChildren = {
  SurfacesConfiguredItemIdRoute: SurfacesConfiguredItemIdRoute,
  SurfacesConfiguredIndexRoute: SurfacesConfiguredIndexRoute,
}

const SurfacesConfiguredRouteWithChildren =
  SurfacesConfiguredRoute._addFileChildren(SurfacesConfiguredRouteChildren)

interface appRouteChildren {
  SplatRoute: typeof SplatRoute
  ButtonsRoute: typeof ButtonsRouteWithChildren
  CloudRoute: typeof CloudRoute
  ConnectionsRoute: typeof ConnectionsRouteWithChildren
  ImportExportRoute: typeof ImportExportRoute
  LogRoute: typeof LogRoute
  ModulesRoute: typeof ModulesRouteWithChildren
  TriggersRoute: typeof TriggersRouteWithChildren
  IndexRoute: typeof IndexRoute
  SettingsAdvancedRoute: typeof SettingsAdvancedRoute
  SettingsBackupsRoute: typeof SettingsBackupsRouteWithChildren
  SettingsButtonsRoute: typeof SettingsButtonsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsProtocolsRoute: typeof SettingsProtocolsRoute
  SettingsSurfacesRoute: typeof SettingsSurfacesRoute
  SurfacesSplatRoute: typeof SurfacesSplatRoute
  SurfacesConfiguredRoute: typeof SurfacesConfiguredRouteWithChildren
  SurfacesDiscoverRoute: typeof SurfacesDiscoverRoute
  SurfacesOutboundRoute: typeof SurfacesOutboundRoute
  VariablesLabelRoute: typeof VariablesLabelRoute
  VariablesCustomRoute: typeof VariablesCustomRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  VariablesIndexRoute: typeof VariablesIndexRoute
}

const appRouteChildren: appRouteChildren = {
  SplatRoute: SplatRoute,
  ButtonsRoute: ButtonsRouteWithChildren,
  CloudRoute: CloudRoute,
  ConnectionsRoute: ConnectionsRouteWithChildren,
  ImportExportRoute: ImportExportRoute,
  LogRoute: LogRoute,
  ModulesRoute: ModulesRouteWithChildren,
  TriggersRoute: TriggersRouteWithChildren,
  IndexRoute: IndexRoute,
  SettingsAdvancedRoute: SettingsAdvancedRoute,
  SettingsBackupsRoute: SettingsBackupsRouteWithChildren,
  SettingsButtonsRoute: SettingsButtonsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsProtocolsRoute: SettingsProtocolsRoute,
  SettingsSurfacesRoute: SettingsSurfacesRoute,
  SurfacesSplatRoute: SurfacesSplatRoute,
  SurfacesConfiguredRoute: SurfacesConfiguredRouteWithChildren,
  SurfacesDiscoverRoute: SurfacesDiscoverRoute,
  SurfacesOutboundRoute: SurfacesOutboundRoute,
  VariablesLabelRoute: VariablesLabelRoute,
  VariablesCustomRoute: VariablesCustomRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  VariablesIndexRoute: VariablesIndexRoute,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

interface EmulatorRouteChildren {
  EmulatorEmulatorIdDotlazyRoute: typeof EmulatorEmulatorIdDotlazyRoute
  EmulatorIndexRoute: typeof EmulatorIndexRoute
}

const EmulatorRouteChildren: EmulatorRouteChildren = {
  EmulatorEmulatorIdDotlazyRoute: EmulatorEmulatorIdDotlazyRoute,
  EmulatorIndexRoute: EmulatorIndexRoute,
}

const EmulatorRouteWithChildren = EmulatorRoute._addFileChildren(
  EmulatorRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRoute: appRouteWithChildren,
  EmulatorRoute: EmulatorRouteWithChildren,
  RedirectsEmulatorHtmlRoute: RedirectsEmulatorHtmlRoute,
  RedirectsEmulator2Route: RedirectsEmulator2Route,
  RedirectsEmulatorsRoute: RedirectsEmulatorsRoute,
  RedirectsHelpHtmlRoute: RedirectsHelpHtmlRoute,
  RedirectsIpadHtmlRoute: RedirectsIpadHtmlRoute,
  RedirectsTabletHtmlRoute: RedirectsTabletHtmlRoute,
  RedirectsTablet2HtmlRoute: RedirectsTablet2HtmlRoute,
  RedirectsTablet3Route: RedirectsTablet3Route,
  GettingStartedDotlazyRoute: GettingStartedDotlazyRoute,
  TabletDotlazyRoute: TabletDotlazyRoute,
  ConnectionDebugDotconnectionIdRoute: ConnectionDebugDotconnectionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
