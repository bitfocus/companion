/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/v1/modules/package': {
		parameters: {
			query?: never
			header?: never
			path?: never
			cookie?: never
		}
		get?: never
		/**
		 * Submit a built module package
		 * @description Submit a built module package
		 */
		put: operations['putModulePackage']
		post?: never
		delete?: never
		options?: never
		head?: never
		patch?: never
		trace?: never
	}
	'/v1/companion/modules/{moduleType}': {
		parameters: {
			query?: never
			header?: never
			path?: never
			cookie?: never
		}
		/**
		 * Get a list of all published modules
		 * @description Get a list of all published modules
		 */
		get: operations['getModules']
		put?: never
		post?: never
		delete?: never
		options?: never
		head?: never
		patch?: never
		trace?: never
	}
	'/v1/companion/modules/{moduleType}/{moduleName}': {
		parameters: {
			query?: never
			header?: never
			path?: never
			cookie?: never
		}
		/**
		 * Get published versions of a module
		 * @description Get published versions of a module
		 */
		get: operations['getModuleVersions']
		put?: never
		post?: never
		delete?: never
		options?: never
		head?: never
		patch?: never
		trace?: never
	}
}
export type webhooks = Record<string, never>
export interface components {
	schemas: {
		ErrorResponse: {
			error: string
		}
		SubmitBuiltModuleInfo: {
			/**
			 * @description The type of module being submitted
			 * @enum {string}
			 */
			moduleType: 'companion-connection'
			/** @description Name of the module */
			moduleName: string
			/** @description Url of build logs */
			logUrl?: string
			/** @description Url of built package and assets */
			pkgDirUrl: string
			/** @description Filename of built package */
			pkgName: string
			/** @description SHA256 hash of the package */
			pkgSha: string
			/** @description JSON string of the module manifest */
			manifestJson: string
		}
		CompanionModuleInfo: {
			/** @description Id of the module */
			id: string
			/** @description The type of module */
			type: string
			/** @description Name of the module */
			name: string
			/** @description Short name of the module */
			shortname: string
			/** @description Manufacturer of the device controller by the module */
			manufacturer: string
			/** @description List of products supported by the module */
			products: string[]
			/** @description List of keywords for the module */
			keywords: string[]
			/** @description Url to the module store page */
			storeUrl: string
			/** @description Url to the module source code */
			githubUrl?: string
			/** @description Url to the module help markdown. This may reference other assets in the same folder */
			latestHelpUrl?: string
			/** @description Old module ids that this module replaces */
			legacyIds?: string[]
			/** @description Reason for deprecation (if deprecated) */
			deprecationReason?: string
		}
		CompanionModuleVersionInfo: {
			/** @description Version number */
			id: string
			/** @description Whether this version is a prerelease */
			isPrerelease: boolean
			/** @description Unix timestamp when the version was published */
			releasedAt: number
			/** @description Url to the module tarball */
			tarUrl?: string
			/** @description SHA256 checksum of the tarball */
			tarSha?: string
			/** @description API version of the module */
			apiVersion: string
			/** @description Reason for deprecation (if deprecated) */
			deprecationReason?: string
			/** @description Url to the module help markdown. This may reference other assets in the same folder */
			helpUrl?: string
		}
	}
	responses: never
	parameters: never
	requestBodies: never
	headers: never
	pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
	putModulePackage: {
		parameters: {
			query?: never
			header?: never
			path?: never
			cookie?: never
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['SubmitBuiltModuleInfo']
			}
		}
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown
				}
				content?: never
			}
			/** @description failed operation */
			400: {
				headers: {
					[name: string]: unknown
				}
				content: {
					'application/json': components['schemas']['ErrorResponse']
				}
			}
		}
	}
	getModules: {
		parameters: {
			query?: never
			header?: never
			path: {
				/** @description Type of module to get */
				moduleType: 'connection'
			}
			cookie?: never
		}
		requestBody?: never
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown
				}
				content: {
					'application/json': {
						modules: components['schemas']['CompanionModuleInfo'][]
					}
				}
			}
		}
	}
	getModuleVersions: {
		parameters: {
			query?: never
			header?: never
			path: {
				/** @description Name of module to get */
				moduleType: string
			}
			cookie?: never
		}
		requestBody?: never
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown
				}
				content: {
					'application/json': {
						versions: components['schemas']['CompanionModuleVersionInfo'][]
					}
				}
			}
			/** @description Module not found */
			404: {
				headers: {
					[name: string]: unknown
				}
				content: {
					'application/json': components['schemas']['ErrorResponse']
				}
			}
		}
	}
}
