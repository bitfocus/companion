diff --git a/out/node-module-collector/packageManager.js b/out/node-module-collector/packageManager.js
index b2e9fa1529d8d9d33aecc397d2d9bc640bd2d761..117efa8aae07594031dce79ff5a7836c2890d7e5 100644
--- a/out/node-module-collector/packageManager.js
+++ b/out/node-module-collector/packageManager.js
@@ -48,11 +48,11 @@ function detectPackageManagerByEnv() {
     const execPath = (_c = (_b = process.env.npm_execpath) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== null && _c !== void 0 ? _c : "";
     const yarnVersion = process.env.YARN_VERSION;
     const isBerry = (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("2.")) || (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("3."));
-    if (ua.includes("pnpm") || execPath.includes("pnpm") || process.env.PNPM_HOME) {
-        return PM.PNPM;
-    }
+    // if (ua.includes("pnpm") || execPath.includes("pnpm") || process.env.PNPM_HOME) {
+    //     return PM.PNPM;
+    // }
     if (ua.includes("yarn") || execPath.includes("yarn") || process.env.YARN_REGISTRY) {
-        return isBerry || ua.includes("yarn/2") || ua.includes("yarn/3") ? PM.YARN_BERRY : PM.YARN;
+        return isBerry || ua.includes("yarn/2") || ua.includes("yarn/3") || ua.includes("yarn/4") ? PM.YARN_BERRY : PM.YARN;
     }
     if (ua.includes("npm") || execPath.includes("npm") || process.env.npm_package_json) {
         return PM.NPM;
diff --git a/out/util/filter.js b/out/util/filter.js
index 369783eff5c64c342831dd3544c3f51e490b0e93..1ddda66f70726723b6d58df0f4c67e930761faa3 100644
--- a/out/util/filter.js
+++ b/out/util/filter.js
@@ -41,7 +41,9 @@ function createFilter(src, patterns, excludePatterns) {
         let relative = getRelativePath(file, srcWithEndSlash, stat);
         // filter the root node_modules, but not a subnode_modules (like /appDir/others/foo/node_modules/blah)
         if (relative === "node_modules") {
-            return false;
+            // return false;
+            // HACK: we want the root node_modules
+            return true
         }
         else if (relative.endsWith("/node_modules")) {
             relative += "/";
diff --git a/out/node-module-collector/nodeModulesCollector.js b/out/node-module-collector/nodeModulesCollector.js
index 6a160296f27bd0848d252f5fa2c049fbabd20236..7f57d7a37e2b0ec53c957a92e4cf0c2a94a1783f 100644
--- a/out/node-module-collector/nodeModulesCollector.js
+++ b/out/node-module-collector/nodeModulesCollector.js
@@ -21,7 +21,7 @@ class NodeModulesCollector {
     async getNodeModules() {
         const tree = await this.getDependenciesTree();
         const realTree = this.getTreeFromWorkspaces(tree);
-        this.collectAllDependencies(realTree);
+        this.collectAllDependencies(tree);
         this.extractProductionDependencyGraph(realTree, "." /*root project name*/);
         const hoisterResult = (0, hoist_1.hoist)(this.transToHoisterTree(this.productionGraph), { check: true });
         this._getNodeModules(hoisterResult.dependencies, this.nodeModules);
